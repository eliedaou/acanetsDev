<html><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"><head><meta http-equiv="Content-Type" content="text/html charset=utf-8"></head><div class=""></div><div class=""><br class=""></div><div class="">B. CPU-GPU Communication:</div><div class="">Using Java RMI technique, we implement the CPU-GPU&nbsp;communication layer on Spark worker nodes. The idea is&nbsp;to offload the workload from Spark worker node’s CPU to&nbsp;the “remote method” that is implemented on the coupled&nbsp;GPU. As demonstrated in Figure 2, there are four major&nbsp;components in the communication layer: the CPU worker&nbsp;JVM, the input/output streams, the GPU worker JVM and the&nbsp;existing libraries. Upon calling the remote method from the&nbsp;CPU&nbsp;JVM, the CPU worker will serialize the data partition&nbsp;on this particular worker and send the serialized data to&nbsp;remote method on the GPU JVM side through the RMI&nbsp;communication interface. On the GPU JVM, a RMI server&nbsp;will get the&nbsp;incoming data, deserialize it, and send the data to the remote method implementation. Since one of our design&nbsp;goals is to utilize existing GPU libraries, thus the true logic of&nbsp;the remote method is in the dynamically linked library (*.so).&nbsp;The library is integrated with GPU JVM through&nbsp;Java Native&nbsp;Interface (JNI).</div><div class=""></div></body></html>